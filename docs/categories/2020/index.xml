<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2020 on Shubham Chadokar</title>
    <link>/categories/2020/</link>
    <description>Recent content in 2020 on Shubham Chadokar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://schadokar.dev&#34;&gt;Shubham Chadokar&lt;/a&gt; 2020</copyright>
    <lastBuildDate>Fri, 01 Jan 2021 12:41:41 +0530</lastBuildDate>
    
        <atom:link href="/categories/2020/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flashback 2020</title>
      <link>/posts/flashback-2020/</link>
      <pubDate>Fri, 01 Jan 2021 12:41:41 +0530</pubDate>
      
      <guid>/posts/flashback-2020/</guid>
      <description>Finally, an another year ends with lots of memory and lost days. Unlike many years, this year was an exception.
A deadly virus come out of China, may be one of the deadliest of the century. With this single event all the perceptions of life has changed.
Not going in that. Lets starts.
 Like all the new year, in 2020 I also made few resolutions. Gym, join some salsa classes, have at least 4-5 trips, dubai expo 2020, reunion with few friends, 50 articles and a few more which I don&#39;t remember.</description>
      
    </item>
    
    <item>
      <title>How to Format Golang Project</title>
      <link>/to-the-point/how-to-format-golang-project/</link>
      <pubDate>Wed, 23 Dec 2020 22:45:35 +0530</pubDate>
      
      <guid>/to-the-point/how-to-format-golang-project/</guid>
      <description>Golang is a strictly typed language. It tells you hw to write clean code and it takes care of formatting.
Unlike many languages where formatting style is opinionated, in Golang it is defined by design.
Formatting Golang CLI command fmt is used to format the file or files.
Format 1 file Open the terminal in the golang project.
Run the below command.
1go fmt main.go Format all the files in the folder Use .</description>
      
    </item>
    
    <item>
      <title>Check if Key Exists in Map in Golang</title>
      <link>/to-the-point/check-if-key-exists-in-map-in-golang/</link>
      <pubDate>Mon, 21 Dec 2020 10:38:27 +0530</pubDate>
      
      <guid>/to-the-point/check-if-key-exists-in-map-in-golang/</guid>
      <description>Map Map is a data structure which implements a hash table.
Map is a simple key-value storage. Map offers fast lookups, adds and deletes.
Zero Value Table Map don&#39;t explicitly check if a key is created or not, instead if a key doesn&#39;t exists it returns the default value of value type.
Data type and their Default Value
   Type Default Value     Numeric type(int, float) 0   Boolean false   String &amp;quot;&amp;rdquo; (empty string)    For Ex.</description>
      
    </item>
    
    <item>
      <title>Golang String Replace</title>
      <link>/to-the-point/golang-string-replace/</link>
      <pubDate>Sat, 19 Dec 2020 21:15:35 +0530</pubDate>
      
      <guid>/to-the-point/golang-string-replace/</guid>
      <description>Golang package strings provides Replace and ReplaceAll functions to replace the substring in the string.
Replace Syntax
1func Replace(s, old, new string, n int) string n is the number of first occurrence of the substring.
Replace n first occurrence of the substring.
If n &amp;lt; 0, then it will replace all the occurrence.
1package main 2 3import ( 4	&amp;#34;fmt&amp;#34; 5	&amp;#34;strings&amp;#34; 6) 7 8func main() { 9 str := &amp;#34;Th0is is an en0c0oded 0000 message&amp;#34; 10 11	newStr := strings.</description>
      
    </item>
    
    <item>
      <title>Check if a character is a number in Golang</title>
      <link>/to-the-point/check-if-a-character-is-a-number-in-golang/</link>
      <pubDate>Sat, 19 Dec 2020 15:04:55 +0530</pubDate>
      
      <guid>/to-the-point/check-if-a-character-is-a-number-in-golang/</guid>
      <description>Unicode is a computing standard for the consistent encoding symbols.
All the characters and symbols assigned a code.
For ex.
1A U+0041 2अ U+0905 All the Unicode is divided into various categories. Browse all the categories.
 Ll Lowercase Letters (a, b, µ, ɸ) Nl Letter Number (Ⅰ, ᛯ) Lo Other Letter (अ, ƻ)  Golang package unicode provides a wide range of validation methods on different set of Unicode.</description>
      
    </item>
    
    <item>
      <title>Convert Hexadecimal to Decimal and Decimal to Hexadecimal in Golang</title>
      <link>/to-the-point/convert-hexadecimal-to-decimal-and-decimal-to-hexadecimal-in-golang/</link>
      <pubDate>Thu, 17 Dec 2020 22:58:00 +0530</pubDate>
      
      <guid>/to-the-point/convert-hexadecimal-to-decimal-and-decimal-to-hexadecimal-in-golang/</guid>
      <description>Decimal Number System Decimal number system is the standard system for denoting integers and non-integers numbers.
This is also known as base 10 number system.
0 1 2 3 4 5 6 7 8 9 Hexadecimal Number System Hexadecimal (mostly used as hex) number system use 16 symbols. It is known as base 16 number system, where 10 symbols are same as decimal and value greater than 9 represent as A=10, B=11, C=12, D=13, E=14, F=15.</description>
      
    </item>
    
    <item>
      <title>Basic validations every nodejs developer should know</title>
      <link>/posts/basic-validations-every-nodejs-developer-should-know/</link>
      <pubDate>Sun, 06 Sep 2020 11:51:52 +0530</pubDate>
      
      <guid>/posts/basic-validations-every-nodejs-developer-should-know/</guid>
      <description>Validations are the key things to prevent the application&#39;s unexpected behaviour. This is a list of basic validations every nodejs developer should know about.
I will keep updating this article with new validation and best approaches.
 typeof operator  Syntax   Number check  Check NaN (not a number) Check if the number is finite   String Check Boolean Check Undefined Check Null Check  Null check using the Object   Function check Object Check  Check using the instanceof   Array Check Buffer Check Conclusion  typeof operator Javascript provides a typeof operator.</description>
      
    </item>
    
    <item>
      <title>Remove an Element From an Array Using Filter in Nodejs</title>
      <link>/to-the-point/remove-an-element-from-an-array-using-filter-in-nodejs/</link>
      <pubDate>Fri, 04 Sep 2020 09:29:51 +0530</pubDate>
      
      <guid>/to-the-point/remove-an-element-from-an-array-using-filter-in-nodejs/</guid>
      <description>In nodejs, there are many options to remove an element from an array, one of them is using the filter.
filter method on array returns a new array based on the filtering condition.
For ex. return the even values in the array
1const arr1 = [1, 2, 3, 4, 5, 6]; 2 3const arr2 = arr1.filter((n) =&amp;gt; n % 2 === 0); 4 5console.log(arr2); Output
[2, 4, 6] Remove an element from the array Remove 5 from the array.</description>
      
    </item>
    
    <item>
      <title>Create a Serverless Application in Golang With AWS</title>
      <link>/posts/create-a-serverless-application-in-golang-with-aws/</link>
      <pubDate>Mon, 10 Aug 2020 23:19:26 +0530</pubDate>
      
      <guid>/posts/create-a-serverless-application-in-golang-with-aws/</guid>
      <description>In this tutorial, we are going to create a golang serverless application and deploy it to the AWS cloud.
Table of Content
 Prerequisites Getting Started  Open hello/main.go Open serverless.yml   Build the application  Build   Deploy Test the application Conclusion  Prerequisites  Serverless Installed AWS account Connect AWS account to serverless  All these are covered in detail in the last tutorial.
Getting Started Create a new directory hello-go-serverless.</description>
      
    </item>
    
    <item>
      <title>Create your first Serverless application</title>
      <link>/posts/create-your-first-serverless-application/</link>
      <pubDate>Sun, 09 Aug 2020 16:04:50 +0530</pubDate>
      
      <guid>/posts/create-your-first-serverless-application/</guid>
      <description>Serverless computing is a cloud computing execution model in which the cloud provider runs the server, and dynamically manages the allocation of machine resources. Pricing is based on the actual amount of resources consumed by an application, rather than on pre-purchased units of capacity. - Wikipedia
In simple language, serverless means pay only for what you use. You might think there is already a Pay-as-you-go model provided by the cloud providers.</description>
      
    </item>
    
    <item>
      <title>Secure Your Api Using Jwt in Golang</title>
      <link>/posts/secure-your-api-using-jwt-in-golang/</link>
      <pubDate>Thu, 30 Jul 2020 11:17:11 +0530</pubDate>
      
      <guid>/posts/secure-your-api-using-jwt-in-golang/</guid>
      <description>In this tutorial, we will learn how to secure the APIs using the JWT authentication in Golang.
In any application, APIs are the bridge between two services. These services can be anything, like a backend service or a frontend service.
To secure the application, bridge security is important.
JWT is a JSON web token. In which, a token is generated by 1 service and shared with another service. Whenever the 2nd service make a request to the 1st service, it will send the token with the request.</description>
      
    </item>
    
    <item>
      <title>How to Send Email in Nodejs with Expressjs</title>
      <link>/posts/how-to-send-email-in-nodejs-with-expressjs/</link>
      <pubDate>Sun, 26 Jul 2020 09:21:13 +0530</pubDate>
      
      <guid>/posts/how-to-send-email-in-nodejs-with-expressjs/</guid>
      <description>This is the 2nd part of the How to send email in Nodejs series. In the last section, we created the function to send the email using node cli.
In this section, we will use the Expressjs and expose the functionality as an API. To test the api, we&#39;re going to use 2 options Curl command and Postman.
Series:  How to Send Email in Nodejs - Part 1 How to Send Email in Nodejs with Expressjs - Part 2  Pre-requisite  Node.</description>
      
    </item>
    
    <item>
      <title>How to Send Email in Nodejs</title>
      <link>/posts/how-to-send-email-in-nodejs/</link>
      <pubDate>Sun, 19 Jul 2020 18:16:06 +0530</pubDate>
      
      <guid>/posts/how-to-send-email-in-nodejs/</guid>
      <description>This is a series of articles on how to send an email in nodejs.
In the first article, we will send an email using the node command. Later, we will create a APIs and a frontend.
Sending emails in nodejs have only 2 requirements:
 Mail service provider (For ex. Gmail, Sendinblue, Mailchimp) Middleware to connect with mail service (For ex. nodemailer)  Series:  How to Send Email in Nodejs - Part 1 How to Send Email in Nodejs with Expressjs - Part 2  Prerequisites  Node.</description>
      
    </item>
    
    <item>
      <title>Convert Byte to Hex and Hex to Byte in Golang</title>
      <link>/to-the-point/convert-byte-to-hex-and-hex-to-byte-in-golang/</link>
      <pubDate>Sat, 18 Jul 2020 13:33:52 +0530</pubDate>
      
      <guid>/to-the-point/convert-byte-to-hex-and-hex-to-byte-in-golang/</guid>
      <description>In this post of to-the-point series, we will convert a hex string to a byte array and vice-versa. For this, we&#39;re going to use the encoding/hex package provided by the golang. Package hex implements hexadecimal encoding and decoding.
byte array to hex string To convert a byte array to hex string, we will encode the byte array to the hexadecimal string.
Syntax 1func EncodeToString(src []byte) string First we will convert a string to a byte array.</description>
      
    </item>
    
    <item>
      <title>Create an Account in Sendinblue</title>
      <link>/to-the-point/create-an-account-in-sendinblue/</link>
      <pubDate>Sat, 20 Jun 2020 17:43:00 +0530</pubDate>
      
      <guid>/to-the-point/create-an-account-in-sendinblue/</guid>
      <description>Sendinblue is a SaaS solution for relationship marketing. It offers a cloud-based marketing communication software suite with email marketing, transactional email, marketing automation, customer-relationship management, landing pages, Facebook ads, retargeting ads, SMS marketing, and more.
Sendinblue offers 300 mails per day for free account. 😃
Getting started There are only 3 easy steps to create an account in Sendinblue.
Step 1 Click on the below Get started link. It will redirect you to the signup page.</description>
      
    </item>
    
    <item>
      <title>How to Send Email in Golang</title>
      <link>/posts/how-to-send-email-in-golang/</link>
      <pubDate>Thu, 11 Jun 2020 11:07:11 +0530</pubDate>
      
      <guid>/posts/how-to-send-email-in-golang/</guid>
      <description>This is a series of tutorials: sending email in golang. We&#39;ll first start with the basic sending an email using the go command.
In the upcoming tutorials, we will create an API and a frontend using which we will send emails.
In this tutorial, we will send an email using the main.go file.
Pre-requisites  go v1.11 or greater - I am using go1.14.3 Code Editor (VSCode, Atom) - I am using VS Code Sendinblue account - link   Check out this step by step tutorial Create an account in sendinblue.</description>
      
    </item>
    
    <item>
      <title>Json in Golang</title>
      <link>/posts/json-in-golang/</link>
      <pubDate>Mon, 23 Mar 2020 11:23:56 +0530</pubDate>
      
      <guid>/posts/json-in-golang/</guid>
      <description>When you start a project which interacts with the outer world, it requires data exchange. To make a project successful this interaction must be simple and efficient.
What is Data Exchange?  Data exchange is the process of taking data structured under a source schema and transforming it into data structured under a target schema, so that the target data is an accurate representation of the source data. - Wikipedia</description>
      
    </item>
    
  </channel>
</rss>
