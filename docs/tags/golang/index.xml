<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Shubham Chadokar</title>
    <link>https://schadokar.dev/tags/golang/</link>
    <description>Recent content in golang on Shubham Chadokar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://schadokar.dev&#34;&gt;Shubham Chadokar&lt;/a&gt; 2020</copyright>
    <lastBuildDate>Sat, 29 Feb 2020 11:55:03 +0530</lastBuildDate>
    
	<atom:link href="https://schadokar.dev/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Compare Strings in Golang</title>
      <link>https://schadokar.dev/to-the-point/compare-strings-in-golang/</link>
      <pubDate>Sat, 29 Feb 2020 11:55:03 +0530</pubDate>
      
      <guid>https://schadokar.dev/to-the-point/compare-strings-in-golang/</guid>
      <description>A string value is a sequence of bytes.
Using the Comparison operators == equal != not equal &amp;lt; less &amp;lt;= less or equal &amp;gt; greater &amp;gt;= greater or equal To check if strings are equal or not, you can use == or !=.
package main import ( &amp;#34;fmt&amp;#34; ) func main() { str1 := &amp;#34;golang&amp;#34; str2 := &amp;#34;gopher&amp;#34; fmt.Println(str1 == str2) fmt.Println(str1 != str2) } Output
false true To check the Lexicographic Order of 2 strings, you can use &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=.</description>
    </item>
    
    <item>
      <title>How to Join Strings in Golang?</title>
      <link>https://schadokar.dev/to-the-point/how-to-join-strings-in-golang/</link>
      <pubDate>Thu, 27 Feb 2020 19:46:51 +0530</pubDate>
      
      <guid>https://schadokar.dev/to-the-point/how-to-join-strings-in-golang/</guid>
      <description>There are multiple ways to join or concat strings in the golang.
Let&#39;s start with the easy one.
Using the + operator ðŸ”§ package main import ( &amp;#34;fmt&amp;#34; ) func main() { str1 := &amp;#34;Hello&amp;#34; // there is a space before World 	str2 := &amp;#34; World!&amp;#34; fmt.Println(str1 + str2) } Output
Hello World!  Using Sprint, Sprintf, Sprintln ðŸ›  The fmt package has Sprint, Sprintf and Sprintln function which can format the strings using the default or custom formats.</description>
    </item>
    
    <item>
      <title>Use Environment Variable in your next Golang Project</title>
      <link>https://schadokar.dev/posts/go-env-ways/</link>
      <pubDate>Sun, 12 Jan 2020 18:14:49 +0530</pubDate>
      
      <guid>https://schadokar.dev/posts/go-env-ways/</guid>
      <description>Photo by Moja Msanii on Unsplash When it comes to creating a production-grade application, using the environment variable in the application is de facto.
Why should we use the environment variable? Suppose you have an application with many features and each feature need to access the Database. You configured all the DB information like DBURL, DBNAME, USERNAME and PASSWORD in each feature.
There are a few major disadvantages to this approach, there can be many.</description>
    </item>
    
    <item>
      <title>How to create a CLI in golang with cobra</title>
      <link>https://schadokar.dev/posts/how-to-create-a-cli-in-golang-with-cobra/</link>
      <pubDate>Mon, 18 Nov 2019 15:09:00 +0000</pubDate>
      
      <guid>https://schadokar.dev/posts/how-to-create-a-cli-in-golang-with-cobra/</guid>
      <description>Have you ever wonder why in the world of GUI, CLI still exist? Youâ€™ll better understand it when you build one of your own.
When you learn golang then it is very often that youâ€™ll come across that â€˜golang is great to build cli toolsâ€™. This fascinated me too. So, I tried to get my hands dirty and found a few tutorials of creating a cli but most of all are not basic.</description>
    </item>
    
    <item>
      <title>Build a Todo App in Golang, MongoDB, and React</title>
      <link>https://schadokar.dev/posts/build-a-todo-app-in-golang-mongodb-and-react/</link>
      <pubDate>Tue, 06 Aug 2019 05:41:57 +0000</pubDate>
      
      <guid>https://schadokar.dev/posts/build-a-todo-app-in-golang-mongodb-and-react/</guid>
      <description>The main purpose of this tutorial to get hands-on experience in Golang. When I was learning Golang, I realized there are very few tutorials and articles out there which give you a complete end to end hands-on experience.
This is the GitHub link for the complete code.
 In this tutorial, we will build a todo app in which the server will be in Golang, the database will be MongoDB, and the frontend will be in React.</description>
    </item>
    
  </channel>
</rss>