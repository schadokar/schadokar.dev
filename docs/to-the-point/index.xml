<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To-the-points on Shubham Chadokar</title>
    <link>https://schadokar.dev/to-the-point/</link>
    <description>Recent content in To-the-points on Shubham Chadokar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://schadokar.dev&#34;&gt;Shubham Chadokar&lt;/a&gt; 2020</copyright>
    <lastBuildDate>Tue, 24 Mar 2020 11:13:24 +0530</lastBuildDate>
    
	<atom:link href="https://schadokar.dev/to-the-point/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Read and Write a File in Golang?</title>
      <link>https://schadokar.dev/to-the-point/how-to-read-and-write-a-file-in-golang/</link>
      <pubDate>Tue, 24 Mar 2020 11:13:24 +0530</pubDate>
      
      <guid>https://schadokar.dev/to-the-point/how-to-read-and-write-a-file-in-golang/</guid>
      <description>In this tutorial, we will learn how to read and write files in the file system using the io/ioutil package.
Write a file using WriteFile The WriteFile function takes 3 arguments, filename, data in a byte array, and filemode.
func WriteFile(filename string, data []byte, perm os.FileMode) error A FileMode represents a file&#39;s mode and permission bits. Learn more
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; ) func main() { // create a byte array of a string  data := []byte(&amp;#34;Hello Gopher!</description>
    </item>
    
    <item>
      <title>Convert String to Int and Int to String in Golang</title>
      <link>https://schadokar.dev/to-the-point/convert-string-to-int-and-int-to-string-in-golang/</link>
      <pubDate>Tue, 03 Mar 2020 08:25:25 +0530</pubDate>
      
      <guid>https://schadokar.dev/to-the-point/convert-string-to-int-and-int-to-string-in-golang/</guid>
      <description>Golang standard library has provided 2 functions Atoi and Itoa to convert string to int and int to string respectively.
These 2 functions placed inside the strconv package.
 Package strconv implements conversions to and from string representations of basic data types.
 String to Int The strconv.Atoi function takes a string and returns an int and an error.
func Atoi(s string) (int, error) It will return type int and type int is system dependent.</description>
    </item>
    
    <item>
      <title>How to use Swapper in Golang?</title>
      <link>https://schadokar.dev/to-the-point/swapper-in-golang/</link>
      <pubDate>Tue, 03 Mar 2020 08:17:07 +0530</pubDate>
      
      <guid>https://schadokar.dev/to-the-point/swapper-in-golang/</guid>
      <description>Swapper is a function defined in the reflect package. This function takes a slice and returns a swap function. This swap function takes 2 indexes as arguments and swaps the values at index position in the slice.
Function Definition func Swapper(slice interface{}) func(i, j int) Let&#39;s try
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;reflect&amp;#34; ) func main() { s := []int{1, 2, 3} fmt.Printf(&amp;#34;Before swap: %v\n&amp;#34;, s) swapF := reflect.Swapper(s) swapF(0, 1) fmt.</description>
    </item>
    
    <item>
      <title>How to Join Strings in Golang?</title>
      <link>https://schadokar.dev/to-the-point/how-to-join-strings-in-golang/</link>
      <pubDate>Thu, 27 Feb 2020 19:46:51 +0530</pubDate>
      
      <guid>https://schadokar.dev/to-the-point/how-to-join-strings-in-golang/</guid>
      <description>There are multiple ways to join or concat strings in the golang.
Let&#39;s start with the easy one.
Using the + operator ðŸ”§ package main import ( &amp;#34;fmt&amp;#34; ) func main() { str1 := &amp;#34;Hello&amp;#34; // there is a space before World 	str2 := &amp;#34; World!&amp;#34; fmt.Println(str1 + str2) } Output
Hello World!  Using Sprint, Sprintf, Sprintln ðŸ›  The fmt package has Sprint, Sprintf and Sprintln function which can format the strings using the default or custom formats.</description>
    </item>
    
  </channel>
</rss>